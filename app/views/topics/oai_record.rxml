if @topic.id
        id_sub = ''
else
        id_sub = '!!!ID!!!'
end
xml.instruct!
xml.tag!("OAI-PMH", "xmlns:xsi".to_sym => "http://www.w3.org/2001/XMLSchema-instance", "xsi:schemaLocation".to_sym => "http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd", "xmlns" => "http://www.openarchives.org/OAI/2.0/") do
        xml.responseDate(Time.now.to_s(:db))
        xml.request(request.protocol + request.host + request.request_uri, :verb => "GetRecord", :identifier => "#{ZoomDb.zoom_id_stub}#{@topic.class.name}:#{@topic.id}", :metadataPrefix => "oai_dc")
        xml.GetRecord do
                xml.record do
                        xml.header do
                                xml.identifier("#{ZoomDb.zoom_id_stub}#{@topic.class.name}:#{@topic.id || id_sub}")
                                xml.datestamp(Date.today.to_s(:db))
                        end
                        xml.metadata do
                                xml.tag!("oai_dc:dc", "xmlns:oai_dc".to_sym => "http://www.openarchives.org/OAI/2.0/oai_dc/", "xmlns:xsi".to_sym => "http://www.w3.org/2001/XMLSchema-instance", "xmlns:dc".to_sym => "http://purl.org/dc/elements/1.1/", "xsi:schemaLocation".to_sym => "http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd") do
                                        xml.tag!("dc:identifier", "http://#{request.host}#{url_for(:controller => 'topics', :action => 'show', :id => @topic.id, :format => nil)}#{"/" + id_sub unless id_sub.blank?}")
                                        xml.tag!("dc:title", @topic.title)
                                        # TODO: publisher should be this instance of Kete
                                        xml.tag!("dc:description", params[:short_summary] || @topic.short_summary)
                                        xml.tag!("dc:description", params[:description] || @topic.description)

                                        # work through content, see what should be it's own dc element
                                        # and what should go in a group dc:description
                                        temp_content = ''
                                        if params[:content]
                                                temp_content = params[:content]
                                        else
                                                temp_content = @topic.content
                                        end
                                        content_hash = XmlSimple.xml_in("<dummy>#{temp_content}</dummy>", 'contentkey' => 'value', 'forcearray'   => false)

                                        non_dc_content_hash = Hash.new
                                        re = Regexp.new("^dc")
                                        content_hash.keys.each do |field|
                                                if !content_hash[field]['xml_element_name'].blank? && re.match(content_hash[field]['xml_element_name'])
                                                        # it's a dublin core tag, just spit it out
                                                        xml.tag!(content_hash[field]['xml_element_name'], content_hash[field]['value'])
                                                elsif !content_hash[field]['xml_element_name'].blank?
                                                        # use xml_element_name, but append to non_dc_content
                                                        x = Builder::XmlMarkup.new
                                                        non_dc_content += x.tag!(content_hash[field]['xml_element_name'], content_hash[field]['value'])
                                                else
                                                        non_dc_content_hash[field] = content_hash[field]['value']
                                                end
                                        end

                                        xml.tag!("dc:description") do
                                                non_dc_content_hash.each do |key, value|
                                                        xml.tag!(key, value)
                                                end
                                        end
                                        # TODO: add dc:creator for either initial poster, or person chosen by initial poster
                                        # TODO: add dc:contributor for anyone who edits, beyond dc:creator
                                        # TODO: add dcterms:modified field for every version date
                                        # TODO: related topics and items should have dc:subject elem here with their title
                                        # TODO: related topics and items should have dc:relation with their dc:identifier here
                                        xml.tag!("dc:date", @topic.created_at || Time.now.to_s(:db) )
                                        xml.tag!("dc:type", "InteractiveResource")
                                        # TODO: when tagging is implemented, get all tags and make them dc:subjects
                                        # TODO: this is mime type
                                        xml.tag!("dc:format", "text/html")
                                end
                        end
                end
        end
end
