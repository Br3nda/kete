xml.instruct!
xml.tag!("OAI-PMH", "xmlns:xsi".to_sym => "http://www.w3.org/2001/XMLSchema-instance", "xsi:schemaLocation".to_sym => "http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd", "xmlns" => "http://www.openarchives.org/OAI/2.0/") do
        xml.responseDate(Time.now.to_s(:db))
        oai_dc_xml_request(xml,@topic)
        xml.GetRecord do
                xml.record do
                        xml.header do
                                oai_dc_xml_oai_identifier(xml,@topic)
                                xml.datestamp(Date.today.to_s(:db))
                        end
                        xml.metadata do
                                xml.tag!("oai_dc:dc", "xmlns:oai_dc".to_sym => "http://www.openarchives.org/OAI/2.0/oai_dc/", "xmlns:xsi".to_sym => "http://www.w3.org/2001/XMLSchema-instance", "xmlns:dc".to_sym => "http://purl.org/dc/elements/1.1/", "xsi:schemaLocation".to_sym => "http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd") do
                                        oai_dc_xml_dc_identifier(xml,@topic)
                                        oai_dc_xml_dc_title(xml,@topic)
                                        oai_dc_xml_dc_publisher(xml)
                                        oai_dc_xml_dc_description(xml,@topic.short_summary)
                                        oai_dc_xml_dc_description(xml,@topic.description)
                                        # work through content, see what should be it's own dc element
                                        # and what should go in a group dc:description
                                        temp_content = @topic.content
                                        content_hash = XmlSimple.xml_in("<dummy>#{temp_content}</dummy>", 'contentkey' => 'value', 'forcearray'   => false)

                                        non_dc_content_hash = Hash.new
                                        re = Regexp.new("^dc")
                                        content_hash.keys.each do |field|
                                                if !content_hash[field]['xml_element_name'].blank? && re.match(content_hash[field]['xml_element_name'])
                                                        # it's a dublin core tag, just spit it out
                                                        xml.tag!(content_hash[field]['xml_element_name'], content_hash[field]['value'])
                                                elsif !content_hash[field]['xml_element_name'].blank?
                                                        # use xml_element_name, but append to non_dc_content
                                                        x = Builder::XmlMarkup.new
                                                        non_dc_content += x.tag!(content_hash[field]['xml_element_name'], content_hash[field]['value'])
                                                else
                                                        non_dc_content_hash[field] = content_hash[field]['value']
                                                end
                                        end

                                        if !non_dc_content_hash.blank?
                                                xml.tag!("dc:description") do
                                                        non_dc_content_hash.each do |key, value|
                                                                xml.tag!(key, value)
                                                        end
                                                end
                                        end

                                        oai_dc_xml_dc_creators_and_date(xml,@topic)
                                        oai_dc_xml_dc_contributors_and_modified_dates(xml,@topic)

                                        # related topics and items should have dc:subject elem here with their title
                                        oai_dc_xml_dc_relations_and_subjects(xml,@topic)
                                        ZOOM_CLASSES.each do |zoom_class|
                                            related_items = ''
                                                if zoom_class == 'Topic'
                                                    related_items = @topic.related_topics
                                                else
                                                    related_items = @topic.send(zoom_class.tableize)
                                                end
                                                related_items.each do |related|
                                                    xml.tag!("dc:subject", related.title)
                                                    xml.tag!("dc:relation", "http://#{request.host}#{url_for(:controller => zoom_class_controller(zoom_class), :action => 'show', :id => related.id, :format => nil, :urlified_name => related.basket.urlified_name)}")
                                                end
                                        end
                                        xml.tag!("dc:type", "InteractiveResource")
                                        # TODO: when tagging is implemented, get all tags and make them dc:subjects
                                        # TODO: this is mime type
                                        xml.tag!("dc:format", "text/html")
                                end
                        end
                end
        end
end
