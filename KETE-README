Current Dependencies:

Plugins:

note that this is largely irrelevant for future installs of kete
svn checkouts will grab extenal deps
or tarballs will include them
more for dev notes (and additional steps)

used "ruby script/plugin install -x" for the following
! TODO: need line for acts_as_zoom
svn://rubyforge.org/var/svn/ajaxscaffoldp/trunk
svn://rubyforge.org/var/svn/redhillonrails/trunk/vendor/plugins/redhillonrails_core
svn://rubyforge.org/var/svn/redhillonrails/trunk/vendor/plugins/foreign_key_migrations
https://secure.near-time.com/svn/plugins/trunk/validates_xml
http://svn.techno-weenie.net/projects/plugins/acts_as_versioned/
svn://railsexpress.de/plugins/piggy_back/trunk
https://secure.near-time.com/svn/plugins/trunk/tiny_mce
# also needs this from root dir "rake tiny_mce:scripts:install"
svn://visioni.st/plugins/validates_http_url/trunk
http://svn.techno-weenie.net/projects/plugins/attachment_fu/

http://svn.techno-weenie.net/projects/plugins/acts_as_authenticated
to use:
script/generate authenticated user account --svn
Note: when I used the generator on my Mac OS X machine, I got an error about zoom not being found.  See the comment in vendor/plugins/acts_as_zoom/lib/acts_as_zoom.rb for how to work around this.  Basically, you probably have the non-Macports version of ruby being selected.  Use "which ruby" to see.  This may also cause postgres ruby driver not to be found.

http://svn.writertopia.com/svn/plugins/authorization

svn://rubyforge.org/var/svn/betternestedset/trunk

http://svn.viney.net.nz/things/rails/plugins/acts_as_taggable_on_steroids

http://svn.devjavu.com/backgroundrb/trunk -- of note, http://backgroundrb.devjavu.com/projects/backgroundrb/ticket/27, see gem dependencies below
besides dependency gems, also needs to have following run in RAILS_ROOT:

rake backgroundrb:setup

then modify config/backgroundrb.yml

then start with this from RAILS_ROOT:

script/backgroundrb start # for dev
script/backgroundrb start -- -r production # for production

Gems:
Rmagick, used by attachment_fu, see install directions in blog.katipo.co.nz
Unicode, also covered in blog
Mimetypes: 'sudo gem install mime-types'
Slave: 'sudo gem install slave' -- BackgroundRB dependency
Daemons: 'sudo gem install daemons' -- BackgroundRB dependency
RedCloth: 'sudo gem install RedCloth' -- used in imports to give our plain text fields better html output

Zebra:

See README under the zebradb directory, note that you will probably want to update zebradb/keteaccess and db/bootstrap/zoom_dbs.yml to suit.  Do this before bootstrapping.

Perl Zoom.pm:

You may encounter an error where Zoom.pm isn't found, even after installing it.  This is caused by the she-bang line pointing at the wrong installation of perl.  If you have installed perl/Zoom.pm via my Macports instructions for Mac OS X, you will need to change it to /opt/local/bin/perl as noted in comments in the acts_as_zoom/lib/zoom_ext_services_action.pl file.

Bootstrapping:
To get your migrations in and then load with some baseline data use the following:

rake db:bootstrap FIXTURES=zoom_dbs.yml,topic_types.yml,extended_fields.yml,topic_type_to_field_mappings.yml,baskets.yml,web_links.yml,web_link_versions.yml,users.yml,roles.yml,roles_users.yml,contributions.yml,content_types.yml

Note the fixtures argument is important for the correct order of loading of the data.  Foreign keys will fail in PostgreSQL otherwise.

Starting server with Mongrel on port 80 for development:

sudo mongrel_rails start -p 80 --user your_user --group your_group

or to run the production environment in the background (i.e. a daemon)

sudo mongrel_rails start -e production -p 80 --user your_user --group your_group -d

to shutdown daemon:

mongrel_rails stop

TODO: mongrel_cluster notes

Demo:

To create a demo with included data do the following (you may want your demo on development instead, adjust to suit):

rake db:make_demo RAILS_ENV=production FIXTURES=zoom_dbs.yml,topic_types.yml,extended_fields.yml,topic_type_to_field_mappings.yml,baskets.yml,users.yml,roles.yml,roles_users.yml,topics.yml,topic_versions.yml,web_links.yml,web_link_versions.yml,videos.yml,video_versions.yml,audio_recordings.yml,audio_recording_versions.yml,still_images.yml,still_image_versions.yml,image_files.yml,contributions.yml,content_item_relations.yml,content_types.yml

TODO: add line about calling site/search/rebuild_zoom_index


When you have different Zebra port and password settings than the distribution:

First off, you should!! Since having the defaults is a security liability, albeit one limited to your kete instance and your zebra databases.

If you are running several instances of Kete and Zebra like I am, you have to update the settings in zebradb/config/kete-zebra-servers.xml and then make the rows in the zoom_dbs table match like so:

mysql> update zoom_dbs set port = NUMBER_OF_CORRECT_PORT where database_name = 'public';
mysql> update zoom_dbs set port = NUMBER_OF_CORRECT_PORT where database_name = 'private';

Using mysql for example, but the same concept applies for postgresql databases.

Do the same thing for zoom_password column (not currently encrypted, so no encrypting necessary) to match the password set in zebradb/keteaccess (although that is encrypted, so note your unencrypted password when use set it with htpasswd command).


Loading a limited number of fixtures (for default data, but after rake db:boostrap):

Loading a fixture deletes all data in the corresponding table before loading.  If you want to load data into a specific empty table, loading a specific fixture is handy. The fixture file needs to be under test/fixtures to work (you may want back up the corresponding file that is already there).  Copy .yml to there, then run this:

rake db:fixtures:load FIXTURES=fixture_file.yml

for an environment other than development, use this:

rake db:fixtures:load RAILS_ENV=production FIXTURES=fixture_file.yml

NOTE: IF YOU RUN THIS WITHOUT THE FIXTURES PARAMETER, YOU WILL DELETE ALL DATA IN YOUR DB!!!!

For the captcha table we need to make a cron job or similar to remove old captcha rows as they will only be valid for a short period of time
- not a big problem to begin with but table will fill up over time
- also talks about having the captcha image being saved in session table
- see http://www.jason-palmer.com/ruby-on-rails-tutorials/database-driven-captcha

-- Walter McGinnis (walter a t katipo dot co dot nz), 2006-10-18
-- updated 2007-05-05

